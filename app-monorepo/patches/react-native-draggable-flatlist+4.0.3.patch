diff --git a/node_modules/react-native-draggable-flatlist/lib/module/components/CellRendererComponent.js b/node_modules/react-native-draggable-flatlist/lib/module/components/CellRendererComponent.js
index 7e32214..05edf51 100644
--- a/node_modules/react-native-draggable-flatlist/lib/module/components/CellRendererComponent.js
+++ b/node_modules/react-native-draggable-flatlist/lib/module/components/CellRendererComponent.js
@@ -66,7 +66,14 @@ function CellRendererComponent(props) {
   }, [translate, activeKey]);
   const updateCellMeasurements = useStableCallback(() => {
     const onSuccess = (x, y, w, h) => {
-      if (isWeb && horizontal) x += scrollOffset.value;
+      // Fix the problem of inaccurate result of `measureLayout`
+      if (isWeb) {
+        if (horizontal) {
+          x += scrollOffset.value
+        } else {
+          y += scrollOffset.value
+        }
+      }
       const cellOffset = horizontal ? x : y;
       const cellSize = horizontal ? w : h;
       cellDataRef.current.set(key, {
diff --git a/node_modules/react-native-draggable-flatlist/lib/module/context/animatedValueContext.js b/node_modules/react-native-draggable-flatlist/lib/module/context/animatedValueContext.js
index 06747c6..7fee357 100644
--- a/node_modules/react-native-draggable-flatlist/lib/module/context/animatedValueContext.js
+++ b/node_modules/react-native-draggable-flatlist/lib/module/context/animatedValueContext.js
@@ -56,6 +56,17 @@ function useSetupAnimatedValues() {
       outerScrollInit.value = outerScrollOffset.value;
     }
   }, [outerScrollOffset]);
+  const dragItemOverflowHitSlop = props?.dragItemOverflowHitSlop
+  const dragItemOverflowHitSlopValue = useSharedValue(dragItemOverflowHitSlop);
+  useAnimatedReaction(
+    () => {
+      return activeIndexAnim.value;
+    },
+    (cur, prev) => {
+      dragItemOverflowHitSlopValue.value = dragItemOverflowHitSlop;
+    },
+    [dragItemOverflowHitSlop]
+  );
   const placeholderOffset = useSharedValue(0);
   const isDraggingCell = useDerivedValue(() => {
     return isTouchActiveNative.value && activeIndexAnim.value >= 0;
@@ -77,7 +88,8 @@ function useSetupAnimatedValues() {
     const offsetRelativeToScrollTop = touchPositionDiff.value + activeCellOffset.value;
     const constrained = Math.min(containerMinusActiveCell, Math.max(scrollOffset.value, offsetRelativeToScrollTop));
     const maxTranslateNegative = -activeCellOffset.value;
-    const maxTranslatePositive = scrollViewSize.value - (activeCellOffset.value + activeCellSize.value); // Only constrain the touch position while the finger is on the screen. This allows the active cell
+    // const maxTranslatePositive = scrollViewSize.value - (activeCellOffset.value + activeCellSize.value); // Only constrain the touch position while the finger is on the screen. This allows the active cell
+    const maxTranslatePositive = (dragItemOverflowHitSlopValue.value?.bottom ?? scrollViewSize.value) - (activeCellOffset.value + activeCellSize.value); // Only constrain the touch position while the finger is on the screen. This allows the active cell
     // to snap above/below the fold once let go, if the drag ends at the top/bottom of the screen.
 
     const constrainedBase = isTouchActiveNative.value ? constrained - activeCellOffset.value : touchPositionDiff.value; // Make sure item is constrained to the boundaries of the scrollview
diff --git a/node_modules/react-native-draggable-flatlist/lib/typescript/types.d.ts b/node_modules/react-native-draggable-flatlist/lib/typescript/types.d.ts
index 2abb4a2..0b0ad47 100644
--- a/node_modules/react-native-draggable-flatlist/lib/typescript/types.d.ts
+++ b/node_modules/react-native-draggable-flatlist/lib/typescript/types.d.ts
@@ -2,6 +2,7 @@ import React from "react";
 import { FlatListProps, LayoutChangeEvent, StyleProp, ViewStyle } from "react-native";
 import { useAnimatedValues } from "./context/animatedValueContext";
 import { FlatList } from "react-native-gesture-handler";
+import type { Insets } from 'react-native'
 import Animated, { AnimateProps, WithSpringConfig } from "react-native-reanimated";
 import { DEFAULT_PROPS } from "./constants";
 export declare type DragEndParams<T> = {
@@ -19,6 +20,7 @@ export declare type DraggableFlatListProps<T> = Modify<FlatListProps<T>, {
     autoscrollThreshold?: number;
     containerStyle?: StyleProp<ViewStyle>;
     debug?: boolean;
+    dragItemOverflowHitSlop?: Insets;
     dragItemOverflow?: boolean;
     keyExtractor: (item: T, index: number) => string;
     onDragBegin?: (index: number) => void;
diff --git a/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx b/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
index 7c88afc..576c536 100644
--- a/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
@@ -39,6 +39,7 @@ import { useAutoScroll } from "../hooks/useAutoScroll";
 import { useStableCallback } from "../hooks/useStableCallback";
 import ScrollOffsetListener from "./ScrollOffsetListener";
 import { typedMemo } from "../utils";
+import { globalRef, resetGlobalRef } from "react-native-draggable-flatlist/src/context/globalRef";
 
 type RNGHFlatListProps<T> = Animated.AnimateProps<
   FlatListProps<T> & {
@@ -216,6 +217,7 @@ function DraggableFlatListInner<T>(props: DraggableFlatListProps<T>) {
 
   const onRelease = useStableCallback((index: number) => {
     props.onRelease?.(index);
+    resetGlobalRef();
   });
 
   const onDragEnd = useStableCallback(
@@ -272,6 +274,11 @@ function DraggableFlatListInner<T>(props: DraggableFlatListProps<T>) {
 
   const gestureDisabled = useSharedValue(false);
 
+  globalRef.reset = reset;
+  const onUpdateGlobalTouchTranslateValue = useStableCallback((v: number) => {
+    globalRef.translationY = v;
+  });
+
   const panGesture = Gesture.Pan()
     .onBegin((evt) => {
       gestureDisabled.value = disabled.value;
@@ -285,6 +292,7 @@ function DraggableFlatListInner<T>(props: DraggableFlatListProps<T>) {
         ? evt.translationX
         : evt.translationY;
       touchTranslate.value = translation;
+      runOnJS(onUpdateGlobalTouchTranslateValue)(touchTranslate.value)
     })
     .onEnd((evt) => {
       if (gestureDisabled.value) return;
diff --git a/node_modules/react-native-draggable-flatlist/src/context/animatedValueContext.tsx b/node_modules/react-native-draggable-flatlist/src/context/animatedValueContext.tsx
index c62360d..5e6ac79 100644
--- a/node_modules/react-native-draggable-flatlist/src/context/animatedValueContext.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/context/animatedValueContext.tsx
@@ -83,6 +83,18 @@ function useSetupAnimatedValues<T>() {
     [outerScrollOffset]
   );
 
+  const dragItemOverflowHitSlop = props?.dragItemOverflowHitSlop;
+  const dragItemOverflowHitSlopValue = useSharedValue(dragItemOverflowHitSlop);
+  useAnimatedReaction(
+    () => {
+      return activeIndexAnim.value;
+    },
+    (cur, prev) => {
+      dragItemOverflowHitSlopValue.value = dragItemOverflowHitSlop;
+    },
+    [dragItemOverflowHitSlop]
+  );
+
   const placeholderOffset = useSharedValue(0);
 
   const isDraggingCell = useDerivedValue(() => {
@@ -118,7 +130,7 @@ function useSetupAnimatedValues<T>() {
 
     const maxTranslateNegative = -activeCellOffset.value;
     const maxTranslatePositive =
-      scrollViewSize.value - (activeCellOffset.value + activeCellSize.value);
+      (dragItemOverflowHitSlopValue.value?.bottom ?? scrollViewSize.value) - (activeCellOffset.value + activeCellSize.value);
 
     // Only constrain the touch position while the finger is on the screen. This allows the active cell
     // to snap above/below the fold once let go, if the drag ends at the top/bottom of the screen.
diff --git a/node_modules/react-native-draggable-flatlist/src/context/globalRef.tsx b/node_modules/react-native-draggable-flatlist/src/context/globalRef.tsx
new file mode 100644
index 0000000..0da5fdb
--- /dev/null
+++ b/node_modules/react-native-draggable-flatlist/src/context/globalRef.tsx
@@ -0,0 +1,12 @@
+const defaultGlobalRef = {
+  translationY: 0,
+  reset: () => {},
+};
+export const globalRef = {
+  ...defaultGlobalRef,
+};
+
+export const resetGlobalRef = () => {
+  globalRef.reset = defaultGlobalRef.reset;
+  globalRef.translationY = defaultGlobalRef.translationY;
+};
diff --git a/node_modules/react-native-draggable-flatlist/src/types.ts b/node_modules/react-native-draggable-flatlist/src/types.ts
index d6755c8..a6e1db0 100644
--- a/node_modules/react-native-draggable-flatlist/src/types.ts
+++ b/node_modules/react-native-draggable-flatlist/src/types.ts
@@ -12,6 +12,7 @@ import Animated, {
   WithSpringConfig,
 } from "react-native-reanimated";
 import { DEFAULT_PROPS } from "./constants";
+import type { Insets } from 'react-native'
 
 export type DragEndParams<T> = {
   data: T[];
@@ -33,6 +34,7 @@ export type DraggableFlatListProps<T> = Modify<
     containerStyle?: StyleProp<ViewStyle>;
     debug?: boolean;
     dragItemOverflow?: boolean;
+    dragItemOverflowHitSlop?: Insets;
     keyExtractor: (item: T, index: number) => string;
     onDragBegin?: (index: number) => void;
     onDragEnd?: (params: DragEndParams<T>) => void;
